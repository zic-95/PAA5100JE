/*
    PAA5100JE.h - Driver library for PAA5100JE optical flow sensor
    Created by Matej Bozic,
    February, 2020.
    https://github.com/zic-95
*/
#ifndef PAA5100JE_OF_H
#define PAA5100JE_OF_H

#include <Arduino.h>
#include <SPI.h>

#define INCH_TO_MM 25.4

/*
    -interrupt routine motion pin
    -frame sync one of
    -frame sync multiple of

*/

class PAA5100JE_OF
{
public:
    PAA5100JE_OF(uint8_t CS_PIN, SPIClass *spi = &SPI);
    ~PAA5100JE_OF();

    bool init();
    bool powerUpSeq();
    bool powerDownSeq();

    void setWorkingHeight(double height);
    void setCPI(double CPI);
    void setResolution(uint8_t resolution);
    void setOrientation(bool invertX, bool invertY, bool swapXandY);
    int getSqual();
    uint8_t getObservation();

    bool getDistance(double deltaVal[]);
    bool getDistance_burst(double deltaVal[]);
    bool motionRead(int16_t deltaVal[]);
    bool burstMotionRead(int16_t deltaVal[]);

    void frameSync_stopOperation();

private:
    double _CPI = 0.0;
    const byte _CS_PIN;
    byte _shutdown_flag = false;
    byte _CPIset_flag = false;

    SPIClass *_spi;
    SPISettings _sensorSettings;

    void writeRegister(uint8_t regAdr, uint8_t dataOut);
    uint8_t readRegister(uint8_t regAdr);
    void performanceOptimizationRoutine();

    typedef enum
    {
        PRODUCT_ID_REG = 0x00,         // RO;  Reset: 0x49
        REVISION_ID_REG = 0x01,        // RO;  Reset: 0x00
        INVERSE_PRODUCT_ID_REG = 0x5F, // RO;  Reset: 0xB6

        MOTION_REG = 0x02,              // R/W; Reset: 0x00
        DELTA_X_L_REG = 0x03,           // RO;  Reset: 0x00
        DELTA_X_H_REG = 0x04,           // RO;  Reset: 0x00
        DELTA_Y_L_REG = 0x05,           // RO;  Reset: 0x00
        DELTA_Y_H_REG = 0x06,           // RO;  Reset: 0x00
        SQUAL_REG = 0x07,               // RO;  Reset: 0x00
        RAW_DATA_SUM_REG = 0x08,        // RO;  Reset: 0x00
        MAXIMUM_RAWDATA_REG = 0x09,     // RO;  Reset: 0x00
        MINIMUM_RAWDATA_REG = 0x0A,     // RO;  Reset: 0x00
        SHUTTER_LOWER_REG = 0x0B,       // RO;  Reset: 0x00
        SHUTTER_UPPER_REG = 0x0C,       // RO;  Reset: 0x00
        OBSERVATION_REG = 0x15,         // R/W; Reset: 0x00
        MOTION_BURST_REG = 0x16,        // RO;  Reset: 0x00
        POWER_UP_RESET_REG = 0x3A,      // WO;  Reset: N/A
        SHUTDOWN_REG = 0x3B,            // WO;  Reset: N/A
        RESOLUTION_REG = 0x4E,          // R/W; Reset: 0x14
        RAWDATA_GRAB_REG = 0x58,        // R/W; Reset: 0x00
        RAWDATA_GRAB_STATUS_REG = 0x59, // RO;  Reset: 0x00
        ORIENTATION_REG = 0x5B          // R/W; Reset: 0xE0
    } PAA5100JE_REG_ADR;

    // Performance optimization registers (proprietary to PixArt)
    byte writeRegAdrOptSend_1[5] = {0x7F, 0x55, 0x50, 0x7F, 0x43};
    byte writeValueOptSend_1[5] = {0x00, 0x01, 0x07, 0x0E, 0x10};
    byte writeRegAdrOptSend_2[5] = {0x7F, 0x51, 0x50, 0x55, 0x7F};
    byte writeValueOptSend_2[5] = {0x00, 0x7B, 0x00, 0x00, 0x0E};
    byte writeRegAdrOptSend_3[67] = {0x7F, 0x61, 0x7F, 0x40, 0x7F, 0x41, 0x43, 0x45, 0x5F, 0x7B, 0x5E, 0x5B, 0x6D, 0x45, 0x70, 0x71, 0x7F, 0x44, 0x40, 0x4E, 0x7F, 0x66, 0x65, 0x6A, 0x61, 0x62, 0x7F, 0x4F, 0x5F, 0x48, 0x49, 0x57, 0x60, 0x61, 0x62, 0x63, 0x7F, 0x45, 0x7F, 0x4D, 0x55, 0x74, 0x75, 0x4A, 0x4B, 0x44, 0x45, 0x64, 0x65, 0x7F, 0x65, 0x66, 0x63, 0x6F, 0x7F, 0x48, 0x7F, 0x41, 0x43, 0x4B, 0x45, 0x44, 0x4C, 0x7F, 0x5B, 0x7F, 0x40};
    byte writeValueOptSend_3[67] = {0x00, 0xAD, 0x03, 0x00, 0x05, 0xB3, 0xF1, 0x14, 0x34, 0x08, 0x34, 0x11, 0x11, 0x17, 0xE5, 0xE5, 0x06, 0x1B, 0xBF, 0x3F, 0x08, 0x44, 0x20, 0x3A, 0x05, 0x05, 0x09, 0xAF, 0x40, 0x80, 0x80, 0x77, 0x78, 0x78, 0x08, 0x50, 0x0A, 0x60, 0x00, 0x11, 0x80, 0x21, 0x1F, 0x78, 0x78, 0x08, 0x50, 0xFF, 0x1F, 0x14, 0x67, 0x08, 0x70, 0x1C, 0x15, 0x48, 0x07, 0x0D, 0x14, 0x0E, 0x0F, 0x42, 0x80, 0x10, 0x02, 0x07, 0x41};
    byte writeRegAdrOptSend_4[16] = {0x7F, 0x32, 0x7F, 0x40, 0x7F, 0x68, 0x69, 0x7F, 0x48, 0x6F, 0x7F, 0x5B, 0x4E, 0x5A, 0x40, 0x73};
    byte writeValueOptSend_4[16] = {0x00, 0x00, 0x07, 0x40, 0x06, 0xF0, 0x00, 0x0D, 0xC0, 0xD5, 0x00, 0xA0, 0xA8, 0x90, 0x80, 0x1F};

    // Frame synchronization procedure (proprietary to PixArt)
    byte writeFrameSyncAdr_1[8] = {0x7F, 0x40, 0x7F, 0x62, 0x63, 0x68, 0x69, 0x7F};
    byte writeFrameSyncVal_1[8] = {0x07, 0x41, 0x06, 0x10, 0x00, 0x10, 0x00, 0x00};
};

#endif